#!/usr/bin/env python

import os
import re
import sys
from inspect import getsourcefile

import agency
import center
import gallery
import villa
from tools.ex import save_to
from tools.git import (
    backup_and_stash_first,
    get_current_head_branch,
    get_ancestor_hash,
    get_hash_for,
    get_remote_head,
    restore_and_pop_last
)
from tools.os import cwd


def help():
    print "\n== Usage ==\n"
    print "\tGet help:"
    print "\t  csi < -h | --help >\n"
    print "\tDefault compare: origin/HEAD or origin/master or origin/trunk vs. HEAD:"
    print "\t  csi\n"
    print "\tCompare HEAD with the given commit, or with the commit of given ancestor index:"
    print "\t  csi < compare_commit | -<num_ancestor_index> >\n"
    print "\tCompare between the given commits: preimage_commit vs. postimage_commit:"
    print "\t  csi < preimage_commit | -<num_preimage_index> > < postimage_commit | -<num_postimage_index> >\n"


def config_env():
    # Villa's jar path
    this_script_path = os.path.abspath(getsourcefile(lambda:0))
    if this_script_path[-1] == "/":
        this_script_path = this_script_path[:-1]
    this_script_dir = this_script_path[:this_script_path.rfind("/")+1]
    villa_path = this_script_dir + "lib/villa.jar"  # jar is at the same dir
    junit_path = this_script_dir + "lib/junit-4.12-getty.jar"  # jar (revised junit) is at the same dir
    agent_path = this_script_dir + "lib/jdyncg-0.1-getty-dycg-agent.jar"  # jar is at the same dir
    if os.path.exists(villa_path) and os.path.exists(junit_path) and os.path.exists(agent_path):
        print "\nvilla.jar path: " + villa_path
        print "\njunit-4.12-getty.jar path: " + junit_path
        print "\njdyncg-0.1-getty-dycg-agent.jar path: " + agent_path
    elif not os.path.exists(villa_path):
        raise EnvironmentError("could not find villa.jar in script dir " + this_script_dir)
    elif not os.path.exists(junit_path):
        raise EnvironmentError("could not find getty-junit-4.12.jar in script dir " + this_script_dir)
    elif not os.path.exists(agent_path):
        raise EnvironmentError("could not find jdyncg-0.1-getty-dycg-agent.jar in script dir " + this_script_dir)
    
    # present working directory - it should be the project's root with "/" at the end
    pwd = cwd()
    if pwd[-1] != "/":
        pwd += "/"
    
    # getty output directory - /tmp/__getty_output__/ or ../projectname__getty_output__/
    if pwd == "/":
        go = "/tmp/__getty_output__/"
    else:
        go = pwd[:-1] + ".__getty_output__/"
    if os.path.exists(go):
        if not os.path.isdir(go):
            raise EnvironmentError(go + " already exists but is not a directory")
    else:
        os.makedirs(go)
    
    # javascript path
    js_path = this_script_dir + "js/"
    
    return villa_path, junit_path, agent_path, pwd, go, js_path


def set_args():
    if len(sys.argv) == 1:
        remote_head = get_remote_head()
        prev_hash = get_hash_for(remote_head)
        post_hash = get_hash_for("HEAD")
    elif len(sys.argv) == 2:
        if sys.argv[1] == "-h" or sys.argv[1] == "--help":
            help()
            exit(0)
        elif re.match("^-\d+", sys.argv[1]):
            index = re.match("^-(\d+)", sys.argv[1]).group(1)
            prev_hash = get_ancestor_hash(index)
            post_hash = get_hash_for("HEAD")
        elif not re.compile("[a-z0-9]{5,}").match(sys.argv[1]):
            help()
            raise ValueError("invalid argument passed: " + sys.argv[1])
        else:
            prev_hash = sys.argv[1]
            post_hash = get_hash_for("HEAD")
    elif len(sys.argv) == 3:
        hash_regex = "[a-z0-9]{5,}"
        index_regex = "(^-(\d+))|0"
        if re.compile(hash_regex).match(sys.argv[1]) and re.compile(hash_regex).match(sys.argv[2]):
            prev_hash = sys.argv[1]
            post_hash = sys.argv[2]
        elif (re.compile(index_regex).match(sys.argv[1]) or sys.argv[1] == "0") and \
                (re.compile(index_regex).match(sys.argv[2]) or sys.argv[2] == "0"):
            if sys.argv[1] == "0":
                arg1 = "-0"
            else:
                arg1 = sys.argv[1]
            prev_index = re.match(index_regex, arg1).group(2)
            prev_hash = get_ancestor_hash(prev_index)
            if sys.argv[2] == "0":
                arg2 = "-0"
            else:
                arg2 = sys.argv[1]
            post_index = re.match(index_regex, arg2).group(2)
            post_hash = get_ancestor_hash(post_index)
        else:
            help()
            raise ValueError("invalid arguments passed: " + sys.argv[1] + " and " + sys.argv[2])
    else:
        raise ValueError("number of arguments should be 0, 1, or 2")
    # consider using `git rev-parse --short HEAD` if shorter names are preferred
    
    return prev_hash, post_hash


if __name__ == "__main__":
    ## env config
    villa_path, junit_path, agent_path, pwd, go, js_path = config_env()
    
    ## args checking & setting
    prev_hash, post_hash = set_args()
    
    '''
        0-th: backup current branch work in stash for the last pass to restore
    '''
    working_branch = get_current_head_branch()
    should_further_recover = backup_and_stash_first()
    
    '''
        multi-stage analysis: Villa (code) and Center (invariants) 
    '''
    old_changed_methods, old_improved_changed_methods, old_added_changed_methods, \
        old_all_ccc_related, old_all_cccs, old_all_methods, \
        old_inner_dataflow_methods, old_outer_dataflow_methods, \
        old_l2m, old_m2l, \
        new_changed_methods, new_improved_changed_methods, new_removed_changed_methods, \
        new_all_ccc_related, new_all_cccs, new_all_methods, \
        new_inner_dataflow_methods, new_outer_dataflow_methods, \
        new_l2m, new_m2l, \
        old_changed_tests, new_changed_tests = \
            villa.visit(villa_path, pwd, go, prev_hash, post_hash)
#     # DEBUG ONLY
#     print "Debug info: "
#     print old_changed_methods
#     print "size of old_all_callers: {0}".format(len(old_all_callers))
#     print "number of keys in old_all_cccs: {0}".format(len(old_all_cccs))
#     print "size of old_all_methods: {0}".format(len(old_all_methods))
#     print new_changed_methods
#     print new_improved_changed_methods
#     print new_removed_changed_methods
#     print "size of new_all_callers: {0}".format(len(new_all_callers))
#     print "number of keys in new_all_cccs: {0}".format(len(new_all_cccs))
#     print "size of new_all_methods: {0}".format(len(new_all_methods))
    
    targets = agency.investigate(go, agent_path, old_all_methods, new_all_methods, prev_hash, post_hash)
    
    center.visit(junit_path, agent_path, go, prev_hash, post_hash, targets)
    
    old_caller_of, old_callee_of = agency.caller_callee(go, prev_hash)
    old_pred_of, old_succ_of = agency.pred_succ(go, prev_hash)
    new_caller_of, new_callee_of = agency.caller_callee(go, post_hash)
    new_pred_of, new_succ_of = agency.pred_succ(go, post_hash)
#     # DEBUG ONLY
#     print "Debug info: "
#     print old_caller_of
#     print old_callee_of
#     print old_pred_of
#     print old_succ_of
#     print new_caller_of
#     print new_callee_of
#     print new_pred_of
#     print new_succ_of
    
    '''
        before last: restore original branch and all its pending work
    '''
    restore_and_pop_last(working_branch, should_further_recover)
    
    '''
        optional: csi view results
    '''
    all_changed_tests = list(set(old_changed_tests + new_changed_tests))
    gallery.exam(pwd, go, js_path, \
                 targets, new_improved_changed_methods, new_all_methods, \
                 new_caller_of, new_callee_of, new_pred_of, new_succ_of, \
                 all_changed_tests, old_changed_tests, new_changed_tests, \
                 prev_hash, post_hash, old_l2m, new_l2m, old_m2l, new_m2l)
    
    print 'Quit Getty.'
