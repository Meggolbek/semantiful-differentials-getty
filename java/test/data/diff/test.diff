diff --git a/CreateDelta.java.file b/CreateDelta.java.file
new file mode 100644
index 0000000..724ca39
--- /dev/null
+++ b/CreateDelta.java.file
@@ -0,0 +1,86 @@
+/*
+   Copyright 2010 Dmitry Naumenko (dm.naumenko@gmail.com)
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+ */
+package difflib;
+
+import java.util.List;
+
+/**
+ * Describes the add-delta between original and revised texts.
+ * 
+ * @author <a href="dm.naumenko@gmail.com">Dmitry Naumenko</a>
+ * @param T
+ *            The type of the compared elements in the 'lines'.
+ */
+public class CreateDelta<T> extends Delta<T> {
+
+	/**
+	 * Creates an insert delta with the two given chunks.
+	 * 
+	 * @param original
+	 *            The original chunk. Must not be {@code null}.
+	 * @param revised
+	 *            The original chunk. Must not be {@code null}.
+	 */
+	public CreateDelta(Chunk<T> original, Chunk<T> revised) {
+		super(original, revised);
+	}
+
+	/**
+	 * {@inheritDoc}
+	 * 
+	 * @throws PatchFailedException
+	 */
+	@Override
+	public void applyTo(List<T> target) throws PatchFailedException {
+		verify(target);
+		int position = this.getOriginal().getPosition();
+		List<T> lines = this.getRevised().getLines();
+		for (int i = 0; i < lines.size(); i++) {
+			target.add(position + i, lines.get(i));
+		}
+	}
+
+	/**
+	 * {@inheritDoc}
+	 */
+	@Override
+	public void restore(List<T> target) {
+		int position = getRevised().getPosition();
+		int size = getRevised().size();
+		for (int i = 0; i < size; i++) {
+			target.remove(position);
+		}
+	}
+
+	@Override
+	public void verify(List<T> target) throws PatchFailedException {
+		if (getOriginal().getPosition() > target.size()) {
+			throw new PatchFailedException("Incorrect patch for delta: "
+					+ "delta original position > target size");
+		}
+
+	}
+
+	public TYPE getType() {
+		return Delta.TYPE.INSERT;
+	}
+
+	@Override
+	public String toString() {
+		return "[InsertDelta, position: " + getOriginal().getPosition()
+				+ ", lines: " + getRevised().getLines() + "]";
+	}
+}
diff --git a/DeleteDelta.java.file b/DeleteDelta.java.file
deleted file mode 100644
index 44dcecc..0000000
--- a/DeleteDelta.java.file
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
-   Copyright 2010 Dmitry Naumenko (dm.naumenko@gmail.com)
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-package difflib;
-
-import java.util.List;
-
-/**
- * Describes the delete-delta between original and revised texts.
- * 
- * @author <a href="dm.naumenko@gmail.com">Dmitry Naumenko</a>
- * @param T The type of the compared elements in the 'lines'.
- */
-public class DeleteDelta<T> extends Delta<T> {
-    
-	/**
-	 * Creates a change delta with the two given chunks.
-	 * 
-	 * @param original
-	 *            The original chunk. Must not be {@code null}.
-	 * @param revised
-	 *            The original chunk. Must not be {@code null}.
-	 */
-    public DeleteDelta(Chunk<T> original, Chunk<T> revised) {
-        super(original, revised);
-    }
-    
-    /**
-     * {@inheritDoc}
-     * 
-     * @throws PatchFailedException
-     */
-    @Override
-    public void applyTo(List<T> target) throws PatchFailedException {
-        verify(target);
-        int position = getOriginal().getPosition();
-        int size = getOriginal().size();
-        for (int i = 0; i < size; i++) {
-            target.remove(position);
-        }
-    }
-    
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public void restore(List<T> target) {
-        int position = this.getRevised().getPosition();
-        List<T> lines = this.getOriginal().getLines();
-        for (int i = 0; i < lines.size(); i++) {
-            target.add(position + i, lines.get(i));
-        }
-    }
-    
-    @Override
-    public TYPE getType() {
-        return Delta.TYPE.DELETE;
-    }
-    
-    @Override
-    public void verify(List<T> target) throws PatchFailedException {
-        getOriginal().verify(target);
-    }
-    
-    @Override
-    public String toString() {
-        return "[DeleteDelta, position: " + getOriginal().getPosition() + ", lines: "
-                + getOriginal().getLines() + "]";
-    }
-}
diff --git a/ModifyDelta.java.file b/ModifyDelta.java.file
index 125b768..bafef4e 100644
--- a/ModifyDelta.java.file
+++ b/ModifyDelta.java.file
@@ -1,5 +1,4 @@
 /*
-   Copyright 2010 Dmitry Naumenko (dm.naumenko@gmail.com)
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
@@ -44,10 +43,13 @@ public class ModifyDelta<T> extends Delta<T> {
         verify(target);
         int position = getOriginal().getPosition();
         int size = getOriginal().size();
+		// add something
+		// and more
         for (int i = 0; i < size; i++) {
             target.remove(position);
         }
-        int i = 0;
+		int j = 0;
+		int i = j;
         for (T line : getRevised().getLines()) {
             target.add(position + i, line);
             i++;
@@ -81,15 +83,19 @@ public class ModifyDelta<T> extends Delta<T> {
                     + "delta original position > target size");
         }
     }
-    
-    @Override
-    public String toString() {
-        return "[ChangeDelta, position: " + getOriginal().getPosition() + ", lines: "
-                + getOriginal().getLines() + " to " + getRevised().getLines() + "]";
-    }
 
     @Override
     public TYPE getType() {
         return Delta.TYPE.CHANGE;
     }
+	
+    @Override
+    public String toString() {
+        return "[ChangeDelta, position: " + getOriginal().getPosition() + ", lines: "
+                + getOriginal().getLines() + " to " + getRevised().getLines() + "]";
+    }
+	
 }
+
+// I actually want to add more
+// so that I can test!
\ No newline at end of file
diff --git a/TestJavaSource2.java.file b/TestJavaSource2.java.file
index 1a48bdb..b9a9dc9 100644
--- a/TestJavaSource2.java.file
+++ b/TestJavaSource2.java.file
@@ -50,4 +50,8 @@ class TestJavaSource2 {
 		}
 	}
 
+	public void testSomething() {
+		fail("not implemented");
+	}
+	
 }
\ No newline at end of file
